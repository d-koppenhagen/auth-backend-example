#!/usr/bin/env node
(function (undefined) {
  const express = require('express');
  const morgan = require('morgan');
  const bodyParser = require('body-parser');

  const config = require('../config');
  const logger = require('../src/utils/logger');
  const routes = require('../src/routes');
  const validateRequestMiddleware = require('../src/middlewares/validateRequest');

  const port = process.env.PORT || config.port || 8080;

  if (!config.secret) {
    logger.error('Server | no value for key \'secret\' in config.js specified');
    process.exit(1);
  }

  let app = express();

  // enable loging and logrotate
  app.use(morgan('combined', { stream: logger.stream }))

  app.use(bodyParser.json());         // to support JSON-encoded bodies
  app.use(bodyParser.urlencoded({     // to support URL-encoded bodies
    extended: true
  }));
  app.all('/*', (req, res, next) => {
    // CORS headers
    res.header('Access-Control-Allow-Origin', '*'); // restrict it to the required domain
    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');
    // Set custom headers for CORS
    res.header('Access-Control-Allow-Headers', 'Content-type,Accept,X-Access-Token,X-Key');
    if (req.method == 'OPTIONS') {
      res.status(200).end();
    } else {
      next();
    }
  });

  // Auth Middleware - This will check if the token is valid
  // Only the requests that start with /api/v1/* will be checked for the token.
  // Any URL's that do not follow the below pattern should be avoided unless you
  // are sure that authentication is not needed
  app.all('/api/v1/*', [validateRequestMiddleware]);

  // use api routes
  app.use('/', routes);

  // start the server
  const server = app.listen(port, () => {
    logger.info('Server | Server is listening on port', port);
  });

})();
